pred4 <- predict(model2, newdata=vowel.test[agree,-1])
m3 <- confusionMatrix(pred3, pred4)
m3
m1
m2
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model1 <- train(diagnosis~., data=training, method="rf")
model2 <- train(diagnosis~., data=training, method="gbm")
model3 <- train(diagnosis~., data=training, method="lda")
str(testing)
pred1 <- predict(model1, newdata=testing[,-1])
pred2 <- predict(model2, newdata=testing[,-1])
pred3 <- predict(model3, newdata=testing[,-1])
predStacked <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
modelStacked <- train(diagnosis~., data=predStacked, method="rf")
predStacked
pred1
pred2
pred3
testing$diagnosis
str(predStacked)
modelStacked
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(predFinal, testing$diagnosis)
predFinal <- predict(modelStacked, newdata=testing[,-1])
confusionMatrix(predFinal, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model1 <- train(CompressiveStrength~., data=training, method="lasso")
?plot.enet
plot(model1)
plot.enet(model1)
?plot.enet
model1
model1$finalModel
?plot.enet
?elasticnet
?enet
plot(model`)
)
[]
`
plot(model1)
?plot.enet
model1
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
bats()
install.packages("forecast")
?bats
bats()
library(forecast)
bats()
?bats
model1 <- bats(training)
str(training)
bats(tstrain)
bats(tstrain)
model1 <- bats(tstrain)
pred1 <- predict(model1, ts(testing$visitsTumblr))
model1
tstest = ts(testing$visitsTumblr)
pred1 <- predict(model1, tstest)
tstest
pred2
pred1
pred1 <- predict(model1, tstest)
tstest
tstrain
pred1 <- forecast(model1)
pred1
pred1 <- forecast(tstest)
pred1
install.packages("e1071")
install.packages("e1071")
library(e1071)
set.seed(325)
model1 <- train(CompressiveStrength~., data=training, method="svm")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model1 <- train(CompressiveStrength~., data=training, method="svm")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model1 <- train(CompressiveStrength~., data=training, method="e1071")
model1 <- svm(CompressiveStrength~., data=training)
predict(model1, newdata=testing)
pred1 <- predict(model1, newdata=testing)
model1
confusionMatrix(pred1, testing$CompressiveStrength)
model1 <- svm(CompressiveStrength~., data=training)
pred1 <- predict(model1, newdata=testing)
confusionMatrix(pred1, testing$CompressiveStrength)
length(pred1)
length(testing$CompressiveStrength)
str(concrete)
str(pred1)
pred1
testing$CompressiveStrength
model1
str(testing)
pred1 <- predict(model1, newdata=testing[,-9])
pred1
str(testing[,-9])
confusionMatrix(pred1, testing$CompressiveStrength)
levels(pred1)
pred1
str(pred1)
table(pred=pred1, true=testing$CompressiveStrength)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model1 <- train(diagnosis~., data=training, method="rf")
model2 <- train(diagnosis~., data=training, method="gbm")
model3 <- train(diagnosis~., data=training, method="lda")
pred1 <- predict(model1, newdata=testing[,-1])
pred2 <- predict(model2, newdata=testing[,-1])
pred3 <- predict(model3, newdata=testing[,-1])
predStacked <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
modelStacked <- train(diagnosis~., data=predStacked, method="rf")
predFinal <- predict(modelStacked, newdata=testing[,-1])
modelStacked
modelStacked$finalModel
model1
model2
model3
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(predStacked, testing$diagnosis)
confusionMatrix(predFinal, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
str(concrete)
model1 <- enet(training[,-9], training$CompressiveStrength, data=training, lamda=0)
model1 <- enet(training[,-9], training$CompressiveStrength,lambda=0)
training[,-9]
data(diabetes)
str(diabetes)
summary(diabetes)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model1 <- train(CompressiveStrength~., data=training, method="lasso")
model1
model1$finalModel
plot(model1)
plot(model1, xvar=step)
plot(model1, xvar="step")
plot(model1, xvar="penalty")
plot(model1, xvar="penalty")
plot.enet(model1, xvar="step")
plot.enet(model1$finalModel, xvar="step")
plot.enet(model1$finalModel, xvar="penalty")
plot.enet(model1$finalModel)
plot.enet(model1$finalModel, xvar="penalty")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
model1 <- bats(tstrain)
tstest = ts(testing$visitsTumblr)
pred1 <- forecast(model1)
pred1
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(gbm)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
model1 <- train(y~., data=vowel.train, method="rf")
model2 <- train(y~., data=vowel.train, method="gbm")
pred1 <- predict(model1, newdata=vowel.test[,-1])
pred2 <- predict(model2, newdata=vowel.test[,-1])
m1 <- confusionMatrix(vowel.test$y, pred1)
m2 <- confusionMatrix(vowel.test$y, pred2)
agree <- which(pred1==pred2 & pred1==vowel.test$y)
pred3 <- predict(model1, newdata=vowel.test[agree,-1])
pred4 <- predict(model2, newdata=vowel.test[agree,-1])
m3 <- confusionMatrix(pred3, pred4)
agree <- which(pred1==pred2)
pred3 <- predict(model1, newdata=vowel.test[agree,-1])
pred4 <- predict(model2, newdata=vowel.test[agree,-1])
m3 <- confusionMatrix(pred3, pred4)
m3
m3 <- confusionMatrix(vowel.test$y, pred4)
m3 <- confusionMatrix(vowel.test[agree, -1]$y, pred4)
pred3
pred4
vowel.test[agree, -1]
vowel.test[agree, -1]$y
str(vowel.test[agree, ])
m3 <- confusionMatrix(vowel.test[agree]$y, pred4)
vowel.test$y
agree
vowel.test$y[agree]
m3 <- confusionMatrix(vowel.test$y[agree], pred4)
m3
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
str(testing)
str(testing[,-1])
model1 <- train(diagnosis~., data=training, method="rf")
model2 <- train(diagnosis~., data=training, method="gbm")
model3 <- train(diagnosis~., data=training, method="lda")
pred1 <- predict(model1, newdata=testing[,-1])
pred2 <- predict(model2, newdata=testing[,-1])
pred3 <- predict(model3, newdata=testing[,-1])
predDf <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
predDf
modelStacked <- train(diagnosis~., data=predDf, method="rf")
predStacked <- predict(modelStacked, newdata=testing[,-1])
matrix1 <- confusionMatrix(pred1, testing[,-1]$diagnosis)
matrix1 <- confusionMatrix(pred1, testing$diagnosis)
matrix1
matrix1 <- confusionMatrix(pred1, testing$diagnosis)
matrix2 <- confusionMatrix(pred2, testing$diagnosis)
matrix3 <- confusionMatrix(pred3, testing$diagnosis)
matrix2
matrix1
matrix34
matrix3
matrixStacked <- confusionMatrix(predStacked, testing$diagnosis)
matrixStacked
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model1 <- train(CompressiveStrength~., data=training, method="lasso")
plot.enet(model1)
plot(model1)
plot.enet(model1$finalModel, xvar="penalty")
plot.enet(model1$finalModel, xvar="penalty")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
model1 <- bats(tstrain)
pred1 <- forecast(model1)
pred1
plot(pred1)
tstest = ts(testing$visitsTumblr)
tstest
plot(tstest)
tstrain
str(pred1)
length(dat)
dim(dat)
dim(training)
dim(testing)
pred1 <- forecast(model1, h=235)
pred1
tstest
length(tstest)
pred1 <- forecast(model1, h=length(tstest))
ls
pred1 <- forecast(model1, h=length(tstest))
pred1
tstrain
tstest
str(pred1)
pred1$upper
pred1$upper[,2]
tstrain >= pred1$upper[,2]
tstest >= pred1$upper[,2]
tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2]
length(tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2])/length(tstest)
count(which(tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2])/length(tstest)
)
tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2]
tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2] == TRUE
count((tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2]) == TRUE)
count((tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2]))
count((tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2]))[2,]
count((tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2]))[2,1]
count((tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2]))[2,2]
count((tstest <= pred1$upper[,2] & tstest >= pred1$lower[,2]))[2,2]/length(tstest)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model1 <- svm(CompressiveStrength~., data=training)
str(testing)
str(testing[,-9])
pred1 <- predict(model1, newdata=testing[,-9])
confusionMatrix(pred1, testing$CompressiveStrength)
pred1
testing$CompressiveStrength
pred1 - testing$CompressiveStrength
sqrt((pred1 - testing$CompressiveStrength)^2)
sqrt(sum((pred1 - testing$CompressiveStrength)^2)
)
sum(sqrt((pred1 - testing$CompressiveStrength)^2))
sqrt( mean( (pred1 - testing$CompressiveStrength)^2 , na.rm = TRUE ) )
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model1 <- train(CompressiveStrength~., data=training, method="lasso")
plot.enet(model1$finalModel, xvar="penalty")
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model1 <- train(diagnosis~., data=training, method="rf")
model2 <- train(diagnosis~., data=training, method="gbm")
model3 <- train(diagnosis~., data=training, method="lda")
pred1 <- predict(model1, newdata=testing[,-1])
pred2 <- predict(model2, newdata=testing[,-1])
pred3 <- predict(model3, newdata=testing[,-1])
matrix1 <- confusionMatrix(pred1, testing$diagnosis)
matrix2 <- confusionMatrix(pred2, testing$diagnosis)
matrix3 <- confusionMatrix(pred3, testing$diagnosis)
predDf <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
modelStacked <- train(diagnosis~., data=predDf, method="rf")
predStacked <- predict(modelStacked, newdata=testing[,-1])
matrixStacked <- confusionMatrix(predStacked, testing$diagnosis)
m3
matrix3
matrix2
matrix1
matrixStacked
source('~/Code/RevealixR/datasets.R')
source('~/Code/RevealixR/processMetadata.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/imaging.R')
regions <- mergeMicrotrial1AuxData(getAllRegions())
steve <- steveSubset(regions)
setwd("~/Code/RevealixR")
regions <- mergeMicrotrial1AuxData(getAllRegions())
steve <- steveSubset(regions)
imageHeatDeltaAll(steve)
reg1
reg2
reg3
reg1
reg3
c
imageHeatDeltaAll(steve)
options(error=recover)
debugSource('~/Code/RevealixR/imaging.R')
imageHeatDeltaAll(steve)
m1c
m2c
dim(m1c)
dim(m2c)
?d
d <- compare(m1c, m2c)
d
debugSource('~/Code/RevealixR/imaging.R')
source('~/Code/RevealixR/imaging.R')
imageHeatDeltaAll(steve)
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
plotAvgTempComparisonPosterior(regions)
temps
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
source('~/Code/RevealixR/datasets.R')
source('~/Code/RevealixR/processMetadata.R')
debugSource('~/Code/RevealixR/plots.R')
source('~/Code/RevealixR/imaging.R')
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
plotAvgTempComparisonPosterior(regions)
temps
debugSource('~/Code/RevealixR/plots.R')
plotAvgTempComparisonPosterior(regions)
temps
debugSource('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
plotAvgTempComparisonLateral(regions)
plotAvgTempComparisonPosterior(regions)
debugSource('~/Code/RevealixR/plots.R')
source('~/Code/RevealixR/plots.R')
debugSource('~/Code/RevealixR/plots.R')
plotAvgTempComparisonPosterior(regions)
debugSource('~/Code/RevealixR/plots.R')
plotAvgTempComparisonLateral(regions)
temps
debugSource('~/Code/RevealixR/plots.R')
plotAvgTempVsTimeSinceTuning(regions)
175000/12
100000 / 12
175000/12
install_github("ramnathv/slidify")
library(devtools)
install_github("ramnathv/slidify")
author("first_deck")
library(slidify)
library(slidify)
author("first_deck")
debugSource('~/Code/RevealixR/plots.R')
plotMinMaxTempVsTime(regions)
plotMinMaxTempVsTime(steve)
plotMinMaxTempVsTimeOfDay(steve)
debugSource('~/Code/RevealixR/plots.R')
x <- seq(-3, 7, by = 1/8)
tx <- cbind(x, cos(pi*x), cospi(x), sin(pi*x), sinpi(x),
tan(pi*x), tanpi(x), deparse.level=2)
op <- options(digits = 4, width = 90) # for nice formatting
head(tx)
tx[ (x %% 1) %in% c(0, 0.5) ,]
options(op)
x <- seq(-3, 7, by = 1/8)
plot(sin(x))
plot(sin(2*x))
plot(sin(2/3*x))
plot(sin((2/3)*x))
plot(sin((4)*x))
x <- seq(-3, 7, by=1/32)
plot(sin((4)*x))
plot(sin((4)*x), type="l")
plot(sin((4)*x) + x, type="l")
x <- seq(-3, 14, by=1/32)
plot(sin((4)*x) + x, type="l")
plot(sin((4)*x) + x + 2x, type="l")
plot(sin((4)*x + x + 2x), type="l")
plot(sin(4*x + x + 2x), type="l")
plot(sin(4*x) + sin(x) + sin(2x), type="l")
plot(sin(4*x) + sin(x) + sin(2*x), type="l")
x
setwd("~/Code/Courses/DataPresentation")
run_app()
runapp
runApp
runApp()
library(shiny)
runApp()
runApp()
runApp()
